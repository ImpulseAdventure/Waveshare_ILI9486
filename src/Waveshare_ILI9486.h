//  Waveshare ILI9486
//  - Class for Waveshare TFT touchscreens + SD card support:
//    - Waveshare 4" Touch LCD Shield for Arduino (SKU: 13587)
//    - Waveshare 3.5" Touch LCD Shield for Arduino (SKU: 13506)
//  
//  Based off the demo code available at:
//  https://www.waveshare.com/wiki/4inch_TFT_Touch_Shield
//
//  Primary improvements:
//    -- full implementation of the GFX API, with new functionality:
//       -- text sizing
//       -- screen rotation
//       -- invert display 
//    -- Proper SPI support - now allows use of other SPI components, including SdFat
//    -- much faster pixel based drawing - circles, disks, rounded corners, diagonal
//       lines now up to 6x faster.
//
//    -- Touchscreen API.  Can easily detect and position touches on the screen.  Based 
//       off the adafruit 'Touchscreen' library:
//       https://github.com/adafruit/Adafruit_TouchScreen
//        -- Automatic ongoing screen calibration.
//        -- co-ordinate normalization - converts raw touchscreen values into co-ordinates 
//           matching the current screen rotation.
//
// The MIT License
//
// Copyright 2019-2020 M Hotchin
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#ifndef _WAVESHARE_ILI9486_h
#define _WAVESHARE_ILI9486_h

//  Touchscreen code ported from Adafruit 'Touchscreen' library.
// https://github.com/adafruit/Adafruit_TouchScreen

// Touch screen library with X Y and Z (pressure) readings as well
// as oversampling to avoid 'bouncing'
// (c) ladyada / adafruit
class TSPoint
{
public:
	TSPoint(void);
	TSPoint(int16_t x, int16_t y, int16_t z);

	bool operator==(TSPoint);
	bool operator!=(TSPoint);

	int16_t x, y, z;
};



//  Configuration data for the touch screen.  It's automatically generated by
//  'normalizePoint()'.
struct TSConfigData
{
	int16_t xMin, xMax;
	int16_t yMin, yMax;
};


//  Code compatible with the Adafruit 'Touchscreen' class, but now it's an Interface.
class WaveshareTouchScreen
{
public:
	//  It's in the class declaration, but not defined anywhere?
	//virtual bool isTouching(void) = 0;

	//  Looks like these return raw values
	virtual uint16_t pressure(void);
	virtual int16_t readTouchY();
	virtual int16_t readTouchX();

	//  This returns averaged values.
	virtual TSPoint getPoint();

	//  Not currently used?
	// int16_t pressureThreshhold;


	//  Data used for normalization.  Process will refine this as it goes along, if you
	//  can save this across power down the screen will be more accurate.
	const TSConfigData &getTsConfigData();
	void setTsConfigData(const TSConfigData &);
	void resetTsConfigData();

	bool normalizeTsPoint(TSPoint &p, uint8_t rotation);

};



//  Straight hardware access.
namespace Waveshare_ILI9486_Impl
{
	void initializePins();

	void startWrite();

	void initializeLcd();

	void writeFillRect2(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);
	void writeColors(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t *pColors);
	void endWrite();
	void setRotation(uint8_t r);

	void invertDisplay(boolean i);
	void setIdleMode(bool idle);

	void setScreenBrightness(uint8_t brightness);
	unsigned int GetSdCardCS();

};

template<class Baseclass>
class Waveshare_ILI9486_Template : public Baseclass, public WaveshareTouchScreen
{
public:
	Waveshare_ILI9486_Template();

	//  Defaults to full brightness
	bool begin();

	//  Set initial brightness
	bool begin(uint8_t brightness);

	//  Use this for SD card support.
	static uint8_t GetSdCardCS();


	// Adafruit GFX interface
	virtual void drawPixel(int16_t x, int16_t y, uint16_t color);    ///< Virtual drawPixel() function to draw to the screen/framebuffer/etc, must be overridden in subclass. @param x X coordinate.  @param y Y coordinate. @param color 16-bit pixel color. 

	virtual void startWrite(void);
	virtual void writePixel(int16_t x, int16_t y, uint16_t color);
	virtual void writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color);
	virtual void writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color);
	virtual void writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color);
	virtual void endWrite(void);

	virtual void setRotation(uint8_t r);
	virtual void invertDisplay(boolean i);

	virtual void
		drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color),
		drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color),
		fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color),
		fillScreen(uint16_t color);
	void drawColors(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t *pColors);

	//  Non Adafruit GFX APIs
	void setScreenBrightness(uint8_t);
	//  'Idle mode' is 8 color display mode.
	void setIdleMode(bool i);

	//  Guess who doesn't provide read access to their LCD?
	//  uint16_t readPixel(int16_t x, int16_t y);

	//  Convert the TsPoint to current screen co-ordinates.  This will also calibrate the
	//  screen as it goes.  To calibrate the screen, just run the stylus off each of the
	//  four edges, calling this on the points as you do so.
	//  Returns TRUE if the calibration data has been updated.
	bool normalizeTsPoint(TSPoint &p);

	//  Size in rotation(0) or Rotation (2).  Swap for rotation(1) & 3.  CALL 'width()'
	//  and 'height()' INSTEAD IF POSSIBLE.  You should only use these if compile-time
	//  constants are needed.
	static constexpr int16_t LCD_WIDTH = 320;
	static constexpr int16_t LCD_HEIGHT = 480;
};


//  The default implementation builds upon the Adafruit_GFX class.  If you have an
//  'enhanced' GFX classed derived from Adafruit_GFX, you can use that as the template
//  paramenter instead, and have access to all your enhancements.
typedef Waveshare_ILI9486_Template<Adafruit_GFX> Waveshare_ILI9486;


////  Template implementation follows
template<class Baseclass>
Waveshare_ILI9486_Template<Baseclass>::Waveshare_ILI9486_Template()
	:Baseclass(LCD_WIDTH, LCD_HEIGHT)
{
	Waveshare_ILI9486_Impl::initializePins();
}

template<class Baseclass>
bool
Waveshare_ILI9486_Template<Baseclass>::begin()
{
	return begin(0xff);
}

template<class Baseclass>
bool
Waveshare_ILI9486_Template<Baseclass>::begin(uint8_t brightness)
{
	Waveshare_ILI9486_Impl::initializePins();

	Waveshare_ILI9486_Impl::initializeLcd();
	setRotation(0);
	setScreenBrightness(brightness);
	return true;
}


template<class Baseclass>
uint8_t
Waveshare_ILI9486_Template<Baseclass>::GetSdCardCS()
{
	return Waveshare_ILI9486_Impl::GetSdCardCS();
}


template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::drawPixel(
	int16_t x, int16_t y, uint16_t color)
{
	startWrite();

	writePixel(x, y, color);

	endWrite();
}


template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::startWrite()
{
	Waveshare_ILI9486_Impl::startWrite();
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::writePixel(
	int16_t x, int16_t y, uint16_t color)
{
	if (x < 0) return;
	if (y < 0) return;

	if (x >= Baseclass::width()) return;
	if (y >= Baseclass::height()) return;

	Waveshare_ILI9486_Impl::writeFillRect2(x, y, 1, 1, color);
}

void TestSkip();

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
	//  Negative widths, so swap left and right sides
	if (w < 0)
	{
		w = -w;
		x -= w;
	}

	//  Negative height, so swap top and bottom
	if (h < 0)
	{
		h = -h;
		y -= h;
	}

	// Left side offscreen, clip
	if (x < 0)
	{
		w += x;
		x = 0;
	}

	// Top offscreen, clip
	if (y < 0)
	{
		h += y;
		y = 0;
	}

	//  Rightside offscreen, clip
	if (x + w > Baseclass::width())
	{
		w = Baseclass::width() - x;
	}

	// bottom offscreen, clip
	if (y + h > Baseclass::height())
	{
		h = Baseclass::height() - y;
	}

	//  Entire width or entire height is offscreen
	if (w <= 0) return;
	if (h <= 0) return;

	// Now, 0 <= x <= x+w <= WIDTH
	// And, 0 <= y <= y+h <= HEIGHT
	Waveshare_ILI9486_Impl::writeFillRect2(x, y, w, h, color);
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::writeFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	writeFillRect(x, y, 1, h, color);
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::writeFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
	writeFillRect(x, y, w, 1, color);
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::endWrite()
{
	Waveshare_ILI9486_Impl::endWrite();
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::setRotation(uint8_t r)
{
	Waveshare_ILI9486_Impl::setRotation(r);
	//  Don't forget to tell the base class!
	Baseclass::setRotation(r);
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::invertDisplay(boolean i)
{
	Waveshare_ILI9486_Impl::invertDisplay(i);
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
	startWrite();
	writeFillRect(x, y, 1, h, color);
	endWrite();
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
	startWrite();
	writeFillRect(x, y, w, 1, color);
	endWrite();
}


template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
	startWrite();
	writeFillRect(x, y, w, h, color);
	endWrite();
}


template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::fillScreen(uint16_t color)
{
	startWrite();
	Waveshare_ILI9486_Impl::writeFillRect2(0, 0, Baseclass::width(), Baseclass::height(), color);
	endWrite();
}

//  Non Adafruit_GFX APIs.
template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::drawColors(
	int16_t x, int16_t y, int16_t w, int16_t h, uint16_t *pColors)
{
	startWrite();
	Waveshare_ILI9486_Impl::writeColors(x, y, w, h, pColors);
	endWrite();
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::setScreenBrightness(uint8_t brightness)
{
	Waveshare_ILI9486_Impl::setScreenBrightness(brightness);
}

template<class Baseclass>
void
Waveshare_ILI9486_Template<Baseclass>::setIdleMode(bool idle)
{
	Waveshare_ILI9486_Impl::setIdleMode(idle);
}


template<class Baseclass>
bool
Waveshare_ILI9486_Template<Baseclass>::normalizeTsPoint(TSPoint &p)
{
	return WaveshareTouchScreen::normalizeTsPoint(p, Baseclass::rotation);
}

#endif

